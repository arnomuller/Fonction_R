validate(need(input$acmOK, ''))
validate(need(input$cahOK, ''))
if(n_cahOK == input$acmOK ){
"Oui"
} else {
"Non_newACM"
}
})
outputOptions(output, "lancer_cah", suspendWhenHidden=FALSE)
#### BOUTON CAH
observeEvent(input$cahOK, {
validate(need(input$target_upload, ''))
validate(need(input$acmOK, ''))
# Controle ACM = CAH
n_cahOK <<- input$acmOK[1]
indic_cah <<- "Oui"
# Si on a des données dans data_acm, on calcule l'ACM
if(is.null(data_acm) == FALSE){
showModal(modalDialog("Classification ...", footer=NULL))
# On transforme les données de data_acm en factor
# Attention pour les variables numériques
# Attention pour les individus ou modalités supplémentaires par la suite
data_acm <- as.data.frame(lapply(data_acm,to_character))
data_acm <- as.data.frame(lapply(data_acm,to_factor))
### CREER LES OBJETS POUR LA CLASSIFICATION
# Plus facile de faire des classifications avec le package ade4, mais factominer est utile pour explor()
# Si on a une pondération
if(var_ponder != ""){
# On commence à la 2ème variables (sans autoacm_id) + les varsup s'il y en a
ade4_mca <<- dudi.acm(data_acm[c((length(var_sup)+2) : length(data_acm))], # On ne garde que les variables actives
scannf = FALSE, nf = Inf, row.w = ponder)
} else{
ade4_mca <<- dudi.acm(data_acm[c((length(var_sup)+2) : length(data_acm))], # On ne garde que les variables actives
scannf = FALSE, nf = Inf)
}
# OBJET CAH INITIAUX
# Ils peuvent être modifié selon les choix utilisateurs plus loin
# Matrice des distances
md <- dist.dudi(ade4_mca)
# Dendrogramme et saut d'inertie
meth_dist <<- "ward.D2"
arbre <<- hclust(md, method = "ward.D2")
inertie <<- sort(arbre$height, decreasing = TRUE)
ncluster <<- 2
### CREER LES UI POUR LES GRAPHIQUES ET LES TABLES -----
## PARAM CLUSTER :
output$affichage_choix_graph_cah <- renderUI({
# On crée une liste des graphiques possibles
list_graph <- c("Dendrogramme" = "dendro", "Saut d'inertie" = "inertie", "ACM avec classes" = "ellipse")
# On crée un bandeau avec les options graphiques possibles
tagList(
column(12,
wellPanel(
fluidRow(
# Choix du type de distance
column(4, selectInput("meth_dist", "Méthodes de calcul des distances :",
choices= c("single", "complete", "average", "mcquitty", "ward.D",
"ward.D2", "centroid", "median"),
multiple = FALSE,
selected = "ward.D2")),
# Selection du graphique
column(4,selectInput(inputId="choix_graph_cah",
label="Choix du graphique : ",
choices= list_graph)),
# Choix du nombre de cluster
column(4, numericInput("ncluster", "Nombre de classes :", 2, min = 1, max = 20))
))))
}) # FIN UI PARAM CLUSTER
## EXPLORATION CLUSTER
output$affichage_choix_table_cah <- renderUI({
validate(need(input$target_upload, 'Importer des données'))
# Choix du type de table
list_graph <- c("Effectifs Classes" = "eff_uni","Effectifs bivariés" = "eff", "% Ligne" = "pct_lign", "% Colonne" = "pct_col", "Sur/Sous-représentation" = "heatmap")
# On crée un bandeau avec les options graphiques possibles
tagList(
column(12,
wellPanel(
fluidRow(
# Choix de la variable à croiser avec la variable de classe
column(5,pickerInput("var_row", "Croiser la variable 'classe' avec :", c("",nomcol_data_reac()),
multiple = F,
options = list(`actions-box` = TRUE, `live-search` = TRUE))),
# Choix du type de tables
column(4, selectInput(inputId="choix_table_cah",
label="Choix du type de table : ",
choices= list_graph))
))))
}) # FIN EXPLORATION CLUSTER
### CREATION DE VARIABLE CLUSTER
data_cah <<- data_acm
if (ncluster >= 1) {
data_cah$cluster <<- as.factor(cutree(arbre, ncluster))
} else{data_cah$cluster <<- 1}
cluster_data2 <- data_cah %>%
select(autoacm_id, cluster)
cluster_data3 <<- data_init2 %>%
left_join(cluster_data2, by = "autoacm_id") %>%
mutate(cluster = ifelse(is.na(cluster) == TRUE, 0, cluster))
v$data <- cluster_data3
nomreac$nomcol <- colnames(v$data)
### GRAPHIQUES
if(ncluster < 2){ # Si moins de deux clusters, on affiche juste les graphiques normaux sans les rectangles
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, title = "")
})
} else { # Si on a des clusters, alors on les affiches sur les graphiques
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
rect.hclust(arbre, ncluster, border = "red")
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
points(ncluster, inertie[ncluster], col = "red", cex = 2, lwd = 3)
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, habillage = as.factor(data_cah$cluster), addEllipses = TRUE, title = "")
})
}
### TABLES BIVARIEES ----
# Effectifs univarié
output$eff_uni <- renderTable({
as.data.frame.matrix(with(cluster_data3, freq(cluster)))
}, include.rownames = T)
# Effectifs
output$eff <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
as.data.frame.matrix(with(cluster_data3, addmargins(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Ligne
output$pct_lign <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, lprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Colonne
output$pct_col <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, cprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Sur-representation
output$heatmap <- renderPlot({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
chisq <- chisq.test(with(cluster_data3, table(get(input$var_row), cluster_data3$cluster)))
corrplot(chisq$residuals, is.cor = FALSE)
})
removeModal()
}
})
### BOUTON METH_DIST ----
observeEvent(input$meth_dist, {
validate(need(input$target_upload, ''))
validate(need(input$acmOK, ''))
validate(need(input$ncluster,''))
showModal(modalDialog("Classification ...", footer=NULL))
### CREER LES OBJETS POUR LA CLASSIFICATION
# Matrice des distances
md <- dist.dudi(ade4_mca)
# Dendrogramme et saut d'inertie
arbre <<- hclust(md, method = input$meth_dist)
inertie <<- sort(arbre$height, decreasing = TRUE)
ncluster <<- input$ncluster
meth_dist <<- input$meth_dist
### CREATION DE VARIABLE CLUSTER
data_cah <<- data_acm
if (ncluster >= 1) {
data_cah$cluster <<- as.factor(cutree(arbre, input$ncluster))
} else{data_cah$cluster <<- 1}
cluster_data2 <- data_cah %>%
select(autoacm_id, cluster)
cluster_data3 <<- data_init2 %>%
left_join(cluster_data2, by = "autoacm_id") %>%
mutate(cluster = ifelse(is.na(cluster) == TRUE, 0, cluster))
v$data <- cluster_data3
nomreac$nomcol <- colnames(v$data)
### GRAPHIQUES
if(input$ncluster < 2){ # Si moins de deux clusters, on affiche juste les graphiques normaux sans les rectangles
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, title = "")
})
} else { # Si on a des clusters, alors on les affiches sur les graphiques
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
rect.hclust(arbre, input$ncluster, border = "red")
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
points(input$ncluster, inertie[input$ncluster], col = "red", cex = 2, lwd = 3)
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, habillage = as.factor(data_cah$cluster), addEllipses = TRUE, title = "")
})
}
### TABLES BIVARIEES ----
# Effectifs univarié
output$eff_uni <- renderTable({
as.data.frame.matrix(with(cluster_data3, freq(cluster)))
}, include.rownames = T)
# Effectifs
output$eff <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
as.data.frame.matrix(with(cluster_data3, addmargins(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Ligne
output$pct_lign <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, lprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Colonne
output$pct_col <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, cprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Sur-representation
output$heatmap <- renderPlot({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
chisq <- chisq.test(with(cluster_data3, table(get(input$var_row), cluster_data3$cluster)))
corrplot(chisq$residuals, is.cor = FALSE)
})
removeModal()
})
### BOUTON NCLUST ----
observeEvent(input$ncluster ,{
validate(need(input$ncluster,''))
# On sauvegarde le nombre de cluster
ncluster <<- input$ncluster
### CREATION DE VARIABLE CLUSTER
data_cah <<- data_acm
if (ncluster >= 1) {
data_cah$cluster <<- as.factor(cutree(arbre, input$ncluster))
} else{data_cah$cluster <<- 1}
cluster_data2 <- data_cah %>%
select(autoacm_id, cluster)
cluster_data3 <<- data_init2 %>%
left_join(cluster_data2, by = "autoacm_id") %>%
mutate(cluster = ifelse(is.na(cluster) == TRUE, 0, cluster))
v$data <- cluster_data3
nomreac$nomcol <- colnames(v$data)
### GRAPHIQUES
if(input$ncluster < 2){ # Si moins de deux clusters, on affiche juste les graphiques normaux sans les rectangles
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, title = "")
})
} else { # Si on a des clusters, alors on les affiches sur les graphiques
# Dendrogramme
output$dendro <- renderPlot({
plot(arbre, labels = FALSE, main = "Choix de la partition",
xlab = "", ylab = "", sub = "",
axes = FALSE, hang = -1)
rect.hclust(arbre, input$ncluster, border = "red")
})
# Saut d'inertie
output$inertie <- renderPlot({
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie")
points(input$ncluster, inertie[input$ncluster], col = "red", cex = 2, lwd = 3)
})
# Ellipse ACM
output$ellipse <- renderPlot({
fviz_mca_ind(res_mca, geom = "point", alpha.ind = .25, habillage = as.factor(data_cah$cluster), addEllipses = TRUE, title = "")
})
}
### TABLES BIVARIEES ----
# Effectifs univarié
output$eff_uni <- renderTable({
as.data.frame.matrix(with(cluster_data3, freq(cluster)))
}, include.rownames = T)
# Effectifs
output$eff <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
as.data.frame.matrix(with(cluster_data3, addmargins(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Ligne
output$pct_lign <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, lprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Pourcentage Colonne
output$pct_col <- renderTable({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'),
need(cluster_data3$cluster,''))
as.data.frame.matrix(with(cluster_data3, cprop(table(get(input$var_row), cluster_data3$cluster))))
}, include.rownames = T)
# Sur-representation
output$heatmap <- renderPlot({
validate(need(input$var_row,'Choisir une variable à croiser avec la variable de classes'))
chisq <- chisq.test(with(cluster_data3, table(get(input$var_row), cluster_data3$cluster)))
corrplot(chisq$residuals, is.cor = FALSE)
})
})
#### UI
# Affichage des graphiques dans l'UI :
output$affichage_graphique <- renderUI({
validate(need(input$target_upload, 'Importer des données'))
validate(need(input$acmOK, 'Importer des données'))
# UTILE CA ?
# Potentiellement c'est ce qui fait que les graphiques sont crées même en dehors de cahOK
validate(need(input$ncluster,''))
###
fluidRow(
column(8, offset = 1,
plotOutput(input$choix_graph_cah, height = 600)
),
column(3, align = "center",
br(),
tableOutput("rappel_cah"),
actionButton("rappel_souspop", "Sous-population")
)
)
})
observeEvent(input$acmOK ,{
output$rappel_cah <- renderTable({
if(is.null(var_sup)){
if(var_ponder == ""){
data.frame(
RAPPEL = c("","VARIABLE ACTIVE :",var_act,"","VARIABLE SUPPLEMENTAIRE :","Pas de var. supp.", "", "PONDERATION :", "Pas de pondération")
)
} else {
data.frame(
RAPPEL = c("","VARIABLE ACTIVE :",var_act,"","VARIABLE SUPPLEMENTAIRE :","Pas de var. supp.", "", "PONDERATION :", var_ponder)
)
}
} else {
if(var_ponder == ""){
data.frame(
RAPPEL = c("","VARIABLE ACTIVE :",var_act,"","VARIABLE SUPPLEMENTAIRE :",var_sup, "", "PONDERATION :", "Pas de pondération")
)
} else {
data.frame(
RAPPEL = c("","VARIABLE ACTIVE :",var_act,"","VARIABLE SUPPLEMENTAIRE :",var_sup, "", "PONDERATION :", var_ponder)
)
}
}
})
})
# Ouvrir la fenêtre pop-up quand le bouton est cliqué
observeEvent(input$rappel_souspop, {
showModal(
modalDialog(
title = "Rappel de la sous-population utilisée :",
renderTable({
tableau_modalite
}),
footer = modalButton("Fermer")
)
)
})
# Affichage des tables dans l'UI :
observeEvent(input$choix_table_cah, {
validate(need(input$ncluster,'Choisir un nombre de classes'))
if (input$choix_table_cah == "heatmap"){
output$affichage_table_cah <- renderUI({
plotOutput(input$choix_table_cah)
})
}
else {
output$affichage_table_cah <- renderUI({
tableOutput(input$choix_table_cah)
})
}
})
### TELECHARGER LES DONNEES AVEC LA VARIABLE CLUSTER
output$downLoadCluster <- downloadHandler(
filename = function() {
paste0('Filtered_data_cluster-', Sys.Date(),".csv")
},
content = function(file) {
showModal(modalDialog("Téléchargement des données avec clusters...", footer=NULL))
on.exit(removeModal())
write_csv2(cluster_data3,file)
}
)
# PASSERELLE VERS EXPLOR() ----
# Appuyer sur le bouton explorACM, stoppe l'ACM et renvoie le signal explorACM
# Ce signal sera reçu dans la fonction VirageACM (script fonction.R), pour ouvrir explor()
observeEvent(input$explorACM, {
js$closeWindow(); stopApp("explorACM")
})
# SAUVEGARDE ----
# https://shiny.rstudio.com/articles/generating-reports.html
# https://shiny.rstudio.com/gallery/download-knitr-reports.html
# https://resources.symbolix.com.au/2020/10/28/downloadable-reports-shiny/
# Création d'un rapport automatique
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
# Nom du rapport en sortie
filename =     function() {
paste0('report-',Sys.Date(),".", switch(
input$report_format, PDF = 'pdf', HTML = 'html', Word = 'docx'
))
},
# Contenu du rapport
content = function(file) {
showModal(modalDialog("Création du rapport automatisé...", footer=NULL))
on.exit(removeModal())
# Copy the template report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list( name_data = inFile$name,
n_data = isolate(n_row_start()),
n_souspop = nrow(data_acm),
axe_X= input$axe_X,
axe_Y= input$axe_Y,
seuil= input$seuil,
taille_label= input$taille_label,
meth_dist = meth_dist,
ncluster = ncluster,
indic_cah = indic_cah,
is_html = input$report_format)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
out <- rmarkdown::render(tempReport,
output_format = switch(
input$report_format,
PDF = pdf_document(), HTML = html_document(), Word = word_document()),
output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
file.rename(out, file)
}
)
# Reactif pour afficher la possibilité de sauvegarder les indicateur de l'ACM
output$afficher_sauvegarde_indic <- reactive({
if (input$acmOK >= 1) {
"Oui"
} else {
"Non"
}
})
outputOptions(output, "afficher_sauvegarde_indic", suspendWhenHidden=FALSE)
# Bouton de téléchargement de la base des indicateurs
output$save_indic <- downloadHandler(
filename = function() {
paste('autoacm-indicACM-', Sys.Date(), '.csv', sep = '')
},
content = function(file){
write_csv(resultats_complet,file)
}
)
}
appOne <- shinyApp(
ui,
server)
route <- "appOne"
while (TRUE) {
app <- switch(
route,
appOne = runApp(appOne),
explorACM = explor(res_mca)
)
if (is.null(app)) {  # not matched
warning("Unknown route ", route)
route <- "appOne"
next
}
# Execute a new app and retrieve return code
route <- print(app)
message("New route ", route)
# browser()
}
}
autoacm()
